/*
	(c) 2021 Dmitry Grinberg   https://dmitry.gr
	Non-commercial use only OR licensing@dmitry.gr
*/


MEMORY
{
	rom   : ORIGIN = 0x10000000, LENGTH = 64K
	ram   : ORIGIN = 0x20010000, LENGTH = 0x71FF8	/* first 64 are cart ram */
	trash : ORIGIN = 0xffff0000, LENGTH = 64K
}

SECTIONS
{

	.text : { KEEP ( *(.text.vec) ) ; KEEP ( *(.text.vec.*) ) ; *(.text.vec) *(.text.vec.*) ;   . = ALIGN(4); __data_data = ABSOLUTE(.) ; }  > rom

	.data : AT ( ADDR ( .text ) + SIZEOF ( .text ) ) {
		__data_start = ADDR ( .data ) + . ;

		/* all code is fast code */
		*(.text) *(.text.*) ; 
		 *(.rodata) *(.rodata.*) ;
		*(.fastcode) ; *(.fastcode.*) ;

		__bss2_end = ADDR ( .text ) + SIZEOF ( .text ) + . - ADDR ( .data );
		
		*(.data) ; *(.data.*) ;
		. = ALIGN(4);
		__data_end = ADDR ( .data ) + . ;
	} > ram

	.bss  :  { . = ALIGN(4); __bss_start  = ABSOLUTE(.) ; *(.bss) *(.bss.*) *(COMMON) ; . = ALIGN(4); __bss_end  = ABSOLUTE(.) ; } > ram

	.ramvec : {
		
		. = ALIGN(512);
		__vtab = ABSOLUTE(.) ;
		. = . + 512 ;

	} > ram

	.trash1 : {
        __exidx_start = .;
		*(.ARM.exidx) *(.ARM.exidx.*);
        __exidx_end = .;
	} > trash

	.trash2 : { *(.init) *(.init.*) ; *(.fini) *(.fini.*) ; }  > trash
}

__stack_top = ORIGIN(ram) + LENGTH(ram);
__bss_size = __bss_end - __bss_start;
__bss2_end = __data_end - __data_start + __data_data;

ENTRY(__VECTORS)
